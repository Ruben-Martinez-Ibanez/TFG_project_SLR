# -*- coding: utf-8 -*-
"""
Created on Thu Mar 23 12:50:05 2023

@author: ruben
"""
import math
import numpy as np

def Marini_Murray(latitud, altitud, elevation, P0, T0, RH, lambda_laser):
    '''
    Funci√≥n que aplica la correcci√≥n troposf√©rica del l√°ser mediante la 
    formulaci√≥n de Marini y Murray. Con ello se tienen en cuenta, en la 
    propagaci√≥n del l√°ser, par√°metros atmosf√©ricos como la temperatura, la
    presi√≥n, la humedad relativa, etc., que pueden tener gran relevancia 
    para √°ngulos mayores de 10¬∫.
    
             f(ùúÜ)            A + B
    Œîd_r = --------- ¬∑ ----------------------
            f(ùúô,H)               B/(A + B)
                       sin E + --------------
                                sin E + 0.01
    _________________________________________________________________
    A = 0.002357¬∑P0 + 0.000141¬∑e0
                                                P0^2        2
    B = (1.084√ó10^‚àí8)¬∑P0¬∑T0¬∑K + (4.734√ó10^‚àí8)¬∑ ------ ¬∑ ---------
                                                T0      (3 - 1/K)
    K = 1.163 ‚àí 0.00968¬∑cos(2ùúô) ‚àí 0.00104¬∑T0 + 0.00001435¬∑P0
    _________________________________________________________________
    # Par√°metro de frecuencia l√°ser (f_lamda):    
        
                    0.0164   0.000228
    f(ùúÜ) = 0.9650 + ------ + --------
                     ùúÜ^2       ùúÜ^4
                     
    # Funci√≥n del sitio l√°ser (f_lat):     
        
    f(ùúô,H) = 1 - 0.0026¬∑cos(2ùúô) - 0.00031¬∑H
    
    # Presi√≥n de vapor del agua en el lugar del l√°ser (mbar - 100 Pa)
    
          RH               7.5¬∑(T0 - 273.15)
    e0 = ---- ¬∑ 6.11¬∑10^-----------------------
         100             273.3 + (T0 - 273.15)
    _________________________________________________________________
        
    Parameters
    ----------
    latitud: float
        ùúô: latitud de la estaci√≥n (rad)
    altitud: float
        altitud de la estaci√≥n (km) --> H: altitud (m)
    elevation: list[float]
        elevaci√≥n del sat√©lite (¬∫) --> E: elevaci√≥n (rad)
    P0: float
        presi√≥n atmosf√©rica en el lugar del l√°ser (100 Pa)
    T0: float
        temperatura atmosf√©rica en el lugar del l√°ser (K)
    RH: float
        humedad relativa en el lugar del l√°ser
    lambda_laser: float
        ùúÜ: longitud de onda del l√°ser (um)
        
    Returns
    -------
    d_r: list[float]
        Œîd_r: correcci√≥n del rango (m)
        
    '''
    phi = latitud
    H = altitud/1000
    E = elevation*math.pi/180
    
    cos2phi = np.cos(2*phi)
    
    e0 = (RH/100)*6.11*10**((7.5*(T0 - 273.15))/(273.3 + (T0 - 273.15)))
    A = 0.002357*P0 + 0.000141*e0
    K = 1.163 - 0.00968*cos2phi - 0.00104*T0 + 0.00001435*P0
    B = 1.084*10**(-8)*P0*T0*K + 4.734*10**(-8)*(P0**2/T0)*2/(3 - 1/K)
    f_lambda = 0.9650 + (0.0164/lambda_laser**2) + (0.000228/lambda_laser**4)
    f_lat = 1 - 0.0026*cos2phi - 0.00031*H
    
    sinE = np.sin(E)
    d_r = (f_lambda/f_lat)*(A + B)/(sinE + (B/(A + B))/(sinE + 0.01))
    return d_r
    